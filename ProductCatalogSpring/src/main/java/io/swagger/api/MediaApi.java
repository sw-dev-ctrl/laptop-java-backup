/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Media;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-12-12T03:03:41.245Z")

@Api(value = "media", description = "the media API")
public interface MediaApi {

    @ApiOperation(value = "get media from the system based on the product OR category ID", notes = "get media from the system based on the product OR category ID.", response = Media.class, responseContainer = "List", tags={ "media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Media.class, responseContainer = "List") })
    
    @RequestMapping(value = "/media",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Media>> getMedia(@ApiParam(value = "ID of category for which you want product") @RequestParam(value = "prid", required = false) Long prid,@ApiParam(value = "ID of category for which you want media") @RequestParam(value = "catid", required = false) Long catid);


    @ApiOperation(value = "get media based on the media id", notes = "get media based on the media id", response = Media.class, tags={ "media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Media.class),
        @ApiResponse(code = 404, message = "media not found", response = Void.class) })
    
    @RequestMapping(value = "/media/{id}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Media> getMediaById(@ApiParam(value = "ID of media to return",required=true ) @PathVariable("id") Long id);

}
